This module defines an integer addition function "add_integer(a, b=98)"
Returns the addition of its two arguments
::
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5
::
	>>> add_integer(2.0, 3.0)
	5
The floats are casted to ints before addition is perfomed
::
	>>> add_integer(2.9, 0.2)
	2
Floating and non-floatig point values can be combined
::
	>>> add_integer(2.3, -3)
The secnd argument is optional. By default it is 98.
::
	>>> add_integer(2)
	100
"add_integer" expects that both arguments are either integers or floats if either argument is non-integer and non-float, a TypeError is raised:
::
	>>> add_integer(2, "hello")
	Traceback (most recent call last):
	TypeError: b must be an integer
::
	>>> add_integer("hello", 2)
	Traceback (most recent call last):
	TypeError: a must be an integer
::
	>>> add_integer(none)
	Traceback (most recent call last):
        TypeError: a must be an integer
::
	
        >>> add_integer(2.3, None)
        Traceback (most recent call last):
        TypeError: b must be an integer
If both arguments are non-integers and non-floats, a TypeError message is only printed for the first argument.
::

        >>> add_integer("hello", "there")
        Traceback (most recent call last):
        TypeError: a must be an integer
The function will fail if infnity is provided
::

        >>> add_integer(float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer
::
	>>> add_integer(2, float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer
